#!/bin/bash
# Copyright (c) 2016 Red Hat, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied.
# See the License for the specific language governing permissions and
# limitations under the License.


set -euo pipefail 

PROG="$(basename "${0}")"
TOPOLOGY='topology.json'
LOG_FILE=''
VERBOSE=0
CLI=''
GLUSTER=0
KUBE_TEMPLATES_DEFAULT="./kube-templates"
OCP_TEMPLATES_DEFAULT="./ocp-templates"
TEMPLATES=""
NAMESPACE="default"
WAIT=300
ABORT=0
NODES=""

usage() {
  echo -e "USAGE: ${PROG} [-ghv] [-c CLI] [-t <TEMPLATES>] [-n NAMESPACE] [-w <SECONDS>]
       [-l <LOG_FILE>] [<TOPOLOGY>]\n"
}

help_exit() {
  usage
  echo "This is a utility script for deploying heketi (and optionally GlusterFS) in a
Kubernetes environment.

Arguments:
  TOPOLOGY    Path to a JSON-formatted file containing the initial topology
              information for the storage heketi will manage.
              Default is '${TOPOLOGY}'.

Options:
  -g, --deploy-gluster
              Deploy GlusterFS pods on the nodes in the topology that contain
              brick devices. If the --abort flag is also specified, this flag
              indicates that all GlusterFS pods and deployments should be
              deleted as well. Default is to not handle GlusterFS deployment
              or removal.

  -c CLI, --cli CLI
              Specify the container platform CLI (e.g. kubectl, oc) to use.
              Default behavior is to auto-detect the installed CLI.

  -t TEMPLATES, --templates_dir TEMPLATES
              Location of directory containing the heketi templates for the
              various resources. Defaults are:
                * For Kubernetes: '${KUBE_TEMPLATES_DEFAULT}'.
                * For OpenShift: '${OCP_TEMPLATES_DEFAULT}'.

  -n NAMESPACE, --namespace NAMESPACE
              The namespace to use for creating resources.
              Defaults is '${NAMESPACE}'.

  -w SECONDS, --wait SECONDS
              Wait SECONDS seconds for pods to become ready. Default is '${WAIT}'.

  -l LOG_FILE, --log-file LOG_FILE
              Save all output to the specified file.

  --abort     Abort a deployment. WARNING: Deletes all related resources.

  -h, --help  Output this help message.

  -v, --verbose
              Verbose output
"
  exit 0
}

output() {
  opts="-e"
  if [[ "${1}" == "-n" ]]; then
    opts+="n"
    shift
  fi
  echo "$opts" "${1}"
  if [[ "${LOG_FILE}" ]]; then
    echo $opts "${1}" >> "${LOG_FILE}"
  fi
}

debug() {
  if [[ ${VERBOSE} -eq 1 ]]; then
    output "${@}"
  fi
}

abort() {
  ${CLI} delete all,service,jobs,deployment,secret --selector="deploy-heketi"
  ${CLI} delete all,service,jobs,deployment,secret --selector="heketi"
  ${CLI} delete svc/heketi-storage-endpoints
  ${CLI} delete sa heketi-service-account
  if [[ "${CLI}" == *oc* ]]; then
    ${CLI} delete template deploy-heketi
    ${CLI} delete template heketi
  fi
  if [[ ${GLUSTER} -eq 1 ]]; then
    while read -r node; do
      debug "Removing label from '${node}' as a GlusterFS node."
      ${CLI} label nodes ${node} storagenode-
    done <<< "$(echo -e "${NODES}")"
    ${CLI} delete all,service,jobs,ds,secret --selector="glusterfs"
    if [[ "${CLI}" == *oc* ]]; then
      ${CLI} delete template glusterfs
    fi
  fi
  exit 1
}

assign() {
  key="${1}"
  assign=`expr index ${key} '='
  `
  if [[ $assign -gt 0 ]]; then
    echo "${key:assign}"
    return 0
  elif [[ $assign -eq 0 ]] &&
       [[ "x${2}" != "x" ]]; then
    echo "${2}"
    return 2
  else
    output "Required parameter for '-${key}' not specified.\n"
    usage
    exit 1
  fi
  keypos=$keylen
}

check_pods() {
  local all_ready=false
  s=0
  prestatus=""
  while [[ "${all_ready}" != "true" ]]; do
    if [[ ${s} -ge ${WAIT} ]]; then
      output "Timed out waiting for pods matching '${1}'."
      abort
    fi
    sleep 2
    ((s+=2))
    pods=$(${CLI} get pod --no-headers --show-all --selector="${1}" 2>&1)
    if [[ "${prestatus}" != "${pods}" ]]; then
      debug "Checking status of pods matching '${1}':"
      debug "$pods"
      prestatus="${pods}"
    else
      debug -n "."
    fi
    all_ready=true
    while read -r pod; do
      case ${2} in
        Completed)
        status=$(echo "${pod}" | awk '{print $3}')
        if [[ "${status}" != "Completed" ]]; then
          all_ready=false
        fi
        ;;
        *)
        status=$(echo "${pod}" | awk '{print $2}')
        if [[ "${status}" != "1/1" ]]; then
          all_ready=false
        fi
        ;;
      esac
    done <<< "$(echo -e "$pods")"
  done
}

while [[ $# -ge 1 ]]; do
  key="${1}"

  case $key in
    -*)
    keylen=${#key}
    keypos=1
    while [[ $keypos -lt $keylen ]]; do
      case ${key:${keypos}} in
        g*|-deploy-gluster)
        GLUSTER=1
        if [[ "$key" == "--deploy-gluster" ]]; then keypos=$keylen; fi
        ;;
        n*|-namespace)
        NAMESPACE=$(assign "${key:${keypos}}" "${2}")
        if [[ $? -eq 2 ]]; then shift; fi
        keypos=$keylen
        ;;
        c*|-cli)
        CLI=$(assign "${key:${keypos}}" "${2}")
        if [[ $? -eq 2 ]]; then shift; fi
        keypos=$keylen
        ;;
        t*|-templates_dir*)
        TEMPLATES=$(assign "${key:${keypos}}" "${2}")
        if [[ $? -eq 2 ]]; then shift; fi
        keypos=$keylen
        ;;
        w*|-wait*)
        WAIT=$(assign "${key:${keypos}}" "${2}")
        if [[ $? -eq 2 ]]; then shift; fi
        keypos=$keylen
        ;;
        l*|-log-file*)
        LOG_FILE=$(assign "${key:${keypos}}" "${2}")
        if [[ $? -eq 2 ]]; then shift; fi
        keypos=$keylen
        ;;
        -abort)
        ABORT=1
        keypos=$keylen
        ;;
        h*|-help)
        help_exit
        ;;
        v*|-verbose)
        VERBOSE=1
        if [[ "$key" == "--verbose" ]]; then keypos=$keylen; fi
        ;;
        *)
        output "Unknown option '${key:${keypos}}'.\n"
        usage
        exit 1
        ;;
      esac
      ((keypos++))
    done
    ;;
    *)
    TOPOLOGY="${key}"
    ;;
  esac
  shift
done

if [[ ! -f ${TOPOLOGY} ]]; then
  echo "Topology File not found!"
  exit 1
else
  NODES=$(python - <<END
import sys
import json
import argparse

file = open('${TOPOLOGY}', 'r')
topo = json.load(file)

for cluster in topo['clusters']:
  for node in cluster['nodes']:
    print(str(node['node']['hostnames']['manage'][0]))
END
)
fi

if [[ "x${CLI}" == "x" ]]; then
  kubectl=$(type kubectl 2>/dev/null | awk '{print $3}')
  oc=$(type oc 2>/dev/null | awk '{print $3}')
  if [[ "x${kubectl}" != "x" ]] && [[ "x${oc}" != "x" ]]; then
    output "Multiple CLI options detected. Please select a deployment option."
    while [[ "x${CLI}" == "x" ]]; do
      loop=false
      read -rp "[O]penShift, [K]ubernetes? [O/o/K/k]: " cliopt
      case $cliopt in
        O*|o*)
        CLI="${oc}"
        ;;
        K*|k*)
        CLI="${kubectl}"
        ;;
        *)
        CLI=""
      esac
    done
  elif [[ "x${oc}" != "x" ]]; then
    CLI="${oc}"
  elif [[ "x${kubectl}" != "x" ]]; then
    CLI="${kubectl}"
  else
    output "Container platform CLI (e.g. kubectl, oc) not found."
    exit 1
  fi
fi

if [[ "${CLI}" == *oc* ]]; then
  output "Using OpenShift CLI."
elif [[ "${CLI}" == *kubectl* ]]; then
  output "Using Kubernetes CLI."
else
  output "Unknown CLI '${CLI}'."
  exit 1
fi

if [[ "x${TEMPLATES}" == "x" ]]; then
  if [[ "${CLI}" == *oc* ]]; then
    TEMPLATES="${OCP_TEMPLATES_DEFAULT}"
  else
    TEMPLATES="${KUBE_TEMPLATES_DEFAULT}"
  fi
fi

if ${CLI} get namespaces | grep -qi ${NAMESPACE}; then
  CLI="${CLI} -n ${NAMESPACE}"
else
  output "Namespace '${NAMESPACE}' not found."
  exit 1
fi

if [[ ${ABORT} -eq 1 ]]; then
  abort
fi

if [[ "${CLI}" == *oc* ]]; then
  ${CLI} create -f ${TEMPLATES}/deploy-heketi-template.yaml  || true
  ${CLI} create -f ${TEMPLATES}/heketi-service-account.yaml  || true
  ${CLI} create -f ${TEMPLATES}/heketi-template.yaml         || true 
  if [[ $GLUSTER -eq 1 ]]; then
    ${CLI} create -f ${TEMPLATES}/glusterfs-template.yaml    || true
  fi
  ${CLI} policy add-role-to-user edit system:serviceaccount:${NAMESPACE}:heketi-service-account || true
else
  ${CLI} create -f ${TEMPLATES}/heketi-service-account.yaml || true
fi

if [[ $GLUSTER -eq 1 ]]; then

  while read -r node; do
    debug "Marking '${node}' as a GlusterFS node."
    ${CLI} label nodes ${node} storagenode=glusterfs
  done <<< "$(echo -e "${NODES}")"
  debug "Deploying GlusterFS pods."
  if [[ "${CLI}" == *oc* ]]; then
    ${CLI} process glusterfs | ${CLI} create -f -
  else
    ${CLI} create -f ${TEMPLATES}/glusterfs-daemonset.yaml
  fi

  output -n "Waiting for GlusterFS pods to start ... "
  check_pods "glusterfs-node=pod"
  output "OK"
fi

sa_secrets=""
while [[ "x${sa_secrets}" == "x" ]]; do
  sa_secrets=$(${CLI} get sa heketi-service-account -o="go-template" --template="{{range .secrets}}{{.name}}{{\"\n\"}}{{end}}" 2>&1)
done
if [[ "${sa_secrets}" == error* ]]; then
  output "Error getting service account secrets. Is your KUBECONFIG set correctly?"
  abort
fi

heketi_secret=""
for secret in ${sa_secrets}; do
  namespace=$(${CLI} get secret/${secret} -o go-template --template="{{.metadata.namespace}}")
  stype=$(${CLI} get secret/${secret} -o="go-template" --template="{{.type}}")
  if [[ "${namespace}" == "${NAMESPACE}" ]] && [[ "${stype}" = "kubernetes.io/service-account-token" ]]; then
    debug "Found secret '$secret' in namespace '$namespace' for heketi-service-account."
    heketi_secret="${secret}"
    break
  else
    debug "Secret '$secret' in namespace '$namespace' not valid."
  fi
done

if [[ "x${heketi_secret}" == "x" ]]; then
  output "Could not find secret for heketi service account."
  abort
fi

context=$(${CLI} config current-context 2>&1)
if [[ "${context}" == error* ]]; then
  output "Error getting Kubernetes context. Is your KUBECONFIG set correctly?"
  abort
fi

cluster=$(${CLI} config view -o jsonpath="{.contexts[?(@.name==\"$context\")].context.cluster}")
kubeapi=$(${CLI} config view -o jsonpath="{.clusters[?(@.name==\"$cluster\")].cluster.server}")

if [[ "${CLI}" == *oc* ]]; then
  ${CLI} process deploy-heketi -v \
         HEKETI_KUBE_NAMESPACE=${NAMESPACE} \
         HEKETI_KUBE_INSECURE=y \
         HEKETI_KUBE_SECRETNAME="${heketi_secret}" \
         HEKETI_KUBE_APIHOST="${kubeapi}" | ${CLI} create -f -
else
  sed -e "s#<HEKETI_KUBE_NAMESPACE>#\"${NAMESPACE}\"#" \
      -e "s#<HEKETI_KUBE_SECRETNAME>#\"${heketi_secret}\"#" \
      -e "s#<HEKETI_KUBE_APIHOST>#\"${kubeapi}\"#" ${TEMPLATES}/deploy-heketi-deployment.yaml | ${CLI} create -f -
fi

output -n "Waiting for deploy-heketi pod to start ... "
check_pods "glusterfs=heketi-pod"
output "OK"

heketi_service=""
debug -n "Determining heketi service URL ... "
while [[ "x${heketi_service}" == "x" ]]; do
  if [[ "${CLI}" == *oc* ]]; then
    heketi_service=$(${CLI} describe routes/deploy-heketi | grep "Requested Host:" | awk '{print $3}')
  else
    heketi_service=$(${CLI} describe svc/deploy-heketi | grep "Endpoints:" | awk '{print $2}')
  fi
  sleep 1
done
debug "OK"

hello=$(curl http://${heketi_service}/hello)
if [[ "${hello}" != "Hello from Heketi" ]]; then
  output "Failed to communicate with deploy-heketi service."
  abort
fi

heketi-cli -s http://${heketi_service} topology load --json=${TOPOLOGY} /dev/null 2>&1
heketi-cli -s http://${heketi_service} setup-openshift-heketi-storage /dev/null 2>&1 
${CLI} create -f heketi-storage.json

check_pods "job-name=heketi-storage-copy-job" "Completed"

${CLI} delete all,service,jobs,deployment,secret --selector="deploy-heketi"

if [[ "${CLI}" == *oc* ]]; then
  ${CLI} process heketi -v \
         HEKETI_KUBE_NAMESPACE=${NAMESPACE} \
         HEKETI_KUBE_INSECURE=y \
         HEKETI_KUBE_SECRETNAME="${heketi_secret}" \
         HEKETI_KUBE_APIHOST="${kubeapi}" | ${CLI} create -f -
else
  sed -e "s#<HEKETI_KUBE_NAMESPACE>#\"${NAMESPACE}\"#" \
      -e "s#<HEKETI_KUBE_SECRETNAME>#\"${heketi_secret}\"#" \
      -e "s#<HEKETI_KUBE_APIHOST>#\"${kubeapi}\"#" ${TEMPLATES}/heketi-deployment.yaml | ${CLI} create -f -
fi

output -n "Waiting for heketi pod to start ... "
check_pods "glusterfs=heketi-pod"
output "OK"

heketi_service=""
debug -n "Determining heketi service URL ... "
while [[ "x${heketi_service}" == "x" ]]; do
  if [[ "${CLI}" == *oc* ]]; then
    heketi_service=$(${CLI} describe routes/heketi | grep "Requested Host:" | awk '{print $3}')
  else
    heketi_service=$(${CLI} describe svc/heketi | grep "Endpoints:" | awk '{print $2}')
  fi
  sleep 1
done
debug "OK"

hello=$(curl http://${heketi_service}/hello)
if [[ "${hello}" != "Hello from Heketi" ]]; then
  output "Failed to communicate with heketi service."
  abort
else
  output "heketi is now running."
fi
